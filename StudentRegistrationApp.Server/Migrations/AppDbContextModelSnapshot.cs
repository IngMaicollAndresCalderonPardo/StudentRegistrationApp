// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentRegistrationApp.Server.Data;

#nullable disable

namespace StudentRegistrationApp.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Professor", b =>
                {
                    b.Property<int>("ProfessorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfessorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProfessorId");

                    b.ToTable("Professors");

                    b.HasData(
                        new
                        {
                            ProfessorId = 1,
                            Name = "Ken Thompson"
                        },
                        new
                        {
                            ProfessorId = 2,
                            Name = "Dennis Ritchie"
                        },
                        new
                        {
                            ProfessorId = 3,
                            Name = "Chris Lattner"
                        },
                        new
                        {
                            ProfessorId = 4,
                            Name = "Joel Spolsky"
                        },
                        new
                        {
                            ProfessorId = 5,
                            Name = "Dave Cutler"
                        });
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.ProfessorSubject", b =>
                {
                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ProfessorId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProfessorSubjects");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasAnnotation("Relational:JsonPropertyName", "cellphone");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("StudentId");

                    b.HasIndex("DocumentNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.StudentSubject", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectId"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int");

                    b.HasKey("SubjectId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            Credits = 3,
                            Name = "Estructuras de Datos",
                            ProfessorId = 2
                        },
                        new
                        {
                            SubjectId = 2,
                            Credits = 3,
                            Name = "Algoritmos",
                            ProfessorId = 2
                        },
                        new
                        {
                            SubjectId = 3,
                            Credits = 3,
                            Name = "Bases de Datos",
                            ProfessorId = 4
                        },
                        new
                        {
                            SubjectId = 4,
                            Credits = 3,
                            Name = "Sistemas Operativos",
                            ProfessorId = 1
                        },
                        new
                        {
                            SubjectId = 5,
                            Credits = 3,
                            Name = "Redes de Computadores",
                            ProfessorId = 5
                        },
                        new
                        {
                            SubjectId = 6,
                            Credits = 3,
                            Name = "Programación Orientada a Objetos",
                            ProfessorId = 3
                        },
                        new
                        {
                            SubjectId = 7,
                            Credits = 3,
                            Name = "Ingeniería de Software",
                            ProfessorId = 4
                        },
                        new
                        {
                            SubjectId = 8,
                            Credits = 3,
                            Name = "Arquitectura de Computadores",
                            ProfessorId = 1
                        },
                        new
                        {
                            SubjectId = 9,
                            Credits = 3,
                            Name = "Inteligencia Artificial",
                            ProfessorId = 5
                        },
                        new
                        {
                            SubjectId = 10,
                            Credits = 3,
                            Name = "Desarrollo Web",
                            ProfessorId = 3
                        });
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.ProfessorSubject", b =>
                {
                    b.HasOne("StudentRegistrationApp.Server.Models.Professor", "Professor")
                        .WithMany("ProfessorSubjects")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationApp.Server.Models.Subject", "Subject")
                        .WithMany("ProfessorSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.StudentSubject", b =>
                {
                    b.HasOne("StudentRegistrationApp.Server.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentRegistrationApp.Server.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Subject", b =>
                {
                    b.HasOne("StudentRegistrationApp.Server.Models.Professor", "Professor")
                        .WithMany("Subjects")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Professor", b =>
                {
                    b.Navigation("ProfessorSubjects");

                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Student", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("StudentRegistrationApp.Server.Models.Subject", b =>
                {
                    b.Navigation("ProfessorSubjects");

                    b.Navigation("StudentSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
